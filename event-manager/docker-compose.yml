version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: event-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: event-postgres
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: notification-rabbitmq
    ports:
      - "5672:5672"   # порт для взаимодействия с RabbitMQ
      - "15672:15672" # порт веб-интерфейса
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network
      - event-network
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    container_name: notification-mailhog
    ports:
      - "1025:1025" # SMTP порт
      - "8025:8025" # Веб-интерфейс
    networks:
      - notification-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_QUEUE=notifications
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USERNAME=notifications@system.com
      - SMTP_PASSWORD=password
      - SMTP_SENDER=notifications@system.com
    depends_on:
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    networks:
      - notification-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - event-network
    restart: unless-stopped

  core-service:
    build:
      context: ./core-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  communication-service:
    build:
      context: ./communication-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      core-service:
        condition: service_healthy
    networks:
      - event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ems-ui-service:
    build:
      context: ./ems-ui-service
      dockerfile: Dockerfile
    container_name: ems-ui-service
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - event-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:

networks:
  notification-network:
    driver: bridge
  event-network:
    driver: bridge
